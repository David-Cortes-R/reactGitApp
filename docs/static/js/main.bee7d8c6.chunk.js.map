{"version":3,"sources":["components/AppCategory.js","helpers/getGifs.js","components/GitGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","GitExportApp.js","index.js"],"names":["AppCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GitGridItem","className","src","alt","GitGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAOaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGRC,mBAAS,IAHD,mBAGtCC,EAHsC,KAG1BC,EAH0B,KAmB9C,OACI,sBAAMC,SAXW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAG,OAAOP,GAAP,mBAAsBO,OACxCN,EAAc,MAMlB,SACI,uBAAQO,KAAK,OAAOC,MAAQT,EACpBU,SAjBU,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCVnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAETC,EAFS,gDAEuCC,UAAWH,GAFlD,+DAIII,MAAOF,GAJX,cAITG,EAJS,gBAKQA,EAAKC,OALb,uBAKPC,EALO,EAKPA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAX3B,kBAgBTM,GAhBS,4CAAH,sDCDPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAKrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCNJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECEb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAXAC,qBAAW,WACPxB,EAASC,GACAwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAG1B,CAAEpB,IAGEqB,EDjB2BK,CAAc1B,GAAlCa,EAJuB,EAI7BN,KAAca,EAJe,EAIfA,QAOtB,OAEI,qCACI,mCAAOpB,KAELoB,EAAU,4CAAqB,KAEjC,qBAAKJ,UAAU,eAAf,SAGYH,EAAOJ,KAAK,SAAAC,GACZ,OAAO,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEnB7BgB,EAAe,WAAO,IAAD,EAGLzC,mBAAS,CAAC,YAHL,mBAEtB0C,EAFsB,KAGvB3C,EAHuB,KAY9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CAECA,SAAWA,GADLA,Y,MCrBtC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bee7d8c6.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const AppCategory = ({ setCategories }) => {\r\n\r\n\r\n    const [ inputValue, setInputValue ] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        \r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cat => [  inputValue, ...cat ] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input  type=\"text\" value={ inputValue }\r\n                    onChange={ handleInputChange } />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nAppCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n        const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=15&api_key=KW7nTJ4y2Mrbo3iLBIOpE6FSj0l470cY`\r\n\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        \r\n\r\n       return gifs;\r\n        \r\n\r\n    }","import React from 'react'\r\n\r\nexport const GitGridItem = ({ id, title, url }) => {\r\n\r\n//    console.log( id, title, url );\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GitGridItem } from './GitGridItem';\r\n\r\nexport const GitGrid = ({ category }) => {\r\n\r\n   \r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n    // console.log( data, loading );\r\n\r\n    \r\n\r\n\r\n\r\n    return (\r\n\r\n        <>  \r\n            <h3> { category }</h3>\r\n\r\n            { loading ? <p>Cargando...</p> : null }\r\n\r\n            <div className=\"card-content\">\r\n\r\n                    {\r\n                        images.map( img => {\r\n                        return <GitGridItem\r\n                                key={ img.id }\r\n                                { ...img }\r\n                        />\r\n                        })\r\n                    }\r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","\r\nimport { useEffect, useState } from 'react';\r\nimport  { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    }); \r\n\r\n   \r\n    useEffect( () => {\r\n        getGifs( category )\r\n                .then( imgs => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                });\r\n    }, [ category ]);\r\n\r\n\r\n    return state;\r\n\r\n\r\n}\r\n","\r\nimport React, { useState } from 'react';\r\nimport { AppCategory } from './components/AppCategory';\r\nimport { GitGrid } from './components/GitGrid';\r\n\r\n\r\n\r\n\r\nexport const GitExpertApp = () => {\r\n\r\n    const [ categories, \r\n           setCategories ] = useState(['Pokemon']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories( [ 'El Chavo', ...categories ]);\r\n    //     setCategories( cat => [ ...cat, 'El Chavo' ]);\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GitExportApp</h2>\r\n            <AppCategory setCategories={ setCategories } />\r\n            <hr/>\r\n     \r\n            <ol>\r\n                {\r\n                    categories.map( category => {\r\n                        return <GitGrid \r\n                                key={ category }\r\n                                category={ category }\r\n                                />\r\n                    })\r\n                }\r\n             </ol>\r\n\r\n        </>\r\n    )\r\n\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GitExpertApp } from './GitExportApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GitExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}